<?php

namespace App\Repository;

use App\Entity\MouvementExploitation;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @method MouvementExploitation|null find($id, $lockMode = null, $lockVersion = null)
 * @method MouvementExploitation|null findOneBy(array $criteria, array $orderBy = null)
 * @method MouvementExploitation[]    findAll()
 * @method MouvementExploitation[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class MouvementExploitationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, MouvementExploitation::class);
    }

    /**
     * @return MouvementExploitation[] Returns an array of MouvementExploitation objects, page Interventions
     */
    public function findHistoByLot($idLot)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idLot = :lot')
            ->setParameter('lot', $idLot)
            ->orderBy('m.dateMouvement', 'DESC')
            ->groupBy('m.idMouvement')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return MouvementExploitation[] Returns an array of MouvementExploitation objects, page Indi pour l'effectif
     */
    public function findEffectifByIndi($idIndi)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :indi')
            ->setParameter('indi', $idIndi)
            ->groupBy('m.idMouvement')
            ->orderBy('m.dateMouvement', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return MouvementExploitation[] Returns an array of MouvementExploitation objects, page Lot pour l'effectif
     */
    public function findEffectifByLot($idLot)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idLot = :lot')
            ->setParameter('lot', $idLot)
            ->groupBy('m.idMouvement')
            ->orderBy('m.dateMouvement', 'DESC')
            ->setMaxResults(1)
            ->getQuery()
            ->getResult();
    }

    /**
     * @return IndividuExploitation[] Returns an array of MouvementExploitation objects: bilan zootechnique
     */
    public function findMouvByIndi($idIndi)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :idIndi')
            ->setParameter('idIndi', $idIndi)
            ->orderBy('m.dateMouvement','DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return IndividuExploitation[] Returns an array of MouvementExploitation objects: bilan zootechnique
     */
    public function findMouvByIndiAndDate($idIndi, $date)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :idIndi')
            ->andWhere('m.dateMouvement <= :date')
            ->setParameter('idIndi', $idIndi)
            ->setParameter('date', $date)
            ->orderBy('m.dateMouvement','DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return IndividuExploitation[] Returns an array of MouvementExploitation objects: bilan zootechnique
     */
    public function findMouvByIndiAndDateDebut($idIndi, $debut)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :idIndi')
            ->andWhere('m.dateMouvement >= :debut')
            ->setParameter('idIndi', $idIndi)
            ->setParameter('debut', $debut)
            ->orderBy('m.dateMouvement','ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return IndividuExploitation[] Returns an array of MouvementExploitation objects: bilan zootechnique
     */
    public function findMouvByIndiAndDateDebut2($idIndi, $debut)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :idIndi')
            ->andWhere('m.dateMouvement <= :debut')
            ->setParameter('idIndi', $idIndi)
            ->setParameter('debut', $debut)
            ->orderBy('m.dateMouvement','DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return IndividuExploitation[] Returns an array of MouvementExploitation objects: bilan zootechnique
     */
    public function findMouvByIndiAndDateFin($idIndi, $fin)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :idIndi')
            ->andWhere('m.dateMouvement <= :fin')
            ->setParameter('idIndi', $idIndi)
            ->setParameter('fin', $fin)
            ->orderBy('m.dateMouvement','DESC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return IndividuExploitation[] Returns an array of MouvementExploitation objects: bilan zootechnique
     */
    public function findMouvByIndiAndDateFin2($idIndi, $fin)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :idIndi')
            ->andWhere('m.dateMouvement >= :fin')
            ->setParameter('idIndi', $idIndi)
            ->setParameter('fin', $fin)
            ->orderBy('m.dateMouvement','ASC')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return IndividuExploitation[] Returns an array of MouvementExploitation objects: bilan zootechnique
     */
    public function findMouvByIndiAndTwoDates($idIndi, $debut, $fin)
    {
        return $this->createQueryBuilder('m')
            ->andWhere('m.idIndi = :idIndi')
            ->andWhere('m.dateMouvement >= :debut')
            ->andWhere('m.dateMouvement <= :fin')
            ->andWhere('m.idTypeMouv = 17')
            ->setParameter('idIndi', $idIndi)
            ->setParameter('debut', $debut)
            ->setParameter('fin', $fin)
            ->orderBy('m.dateMouvement','DESC')
            ->getQuery()
            ->getResult();
    }

    /*
    public function findOneBySomeField($value): ?LotExploitation
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.exampleField = :val')
            ->setParameter('val', $value)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
    */
}
