<?php

namespace App\Repository;

use App\Entity\ExperimentationExploitation;
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;

/**
 * @method ExperimentationExploitation|null find($id, $lockMode = null, $lockVersion = null)
 * @method ExperimentationExploitation|null findOneBy(array $criteria, array $orderBy = null)
 * @method ExperimentationExploitation[]    findAll()
 * @method ExperimentationExploitation[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
class ExperimentationExploitationRepository extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, ExperimentationExploitation::class);
    }

    /**
     * @return ExperimentationExploitation[] Returns an array of ExperimentationExploitation objects
     */
    public function findByUser($id_user, $role, $id_unite, $fin_est_membre)
    {
        return $this->createQueryBuilder('e')
            ->where(':role = :super_admin')
            ->orWhere(':role = :admin_unite AND :id_unite = e.idUnite')
            ->orWhere('e.idUtili = :id')
            ->orWhere('e.idEstRespTechn = :id')
            ->andWhere(':fin_est_membre is NULL')
            ->setParameter('role', $role)
            ->setParameter('super_admin', "ROLE_SUPER_ADMIN")
            ->setParameter('admin_unite', "ROLE_ADMIN_UNITE")
            ->setParameter('fin_est_membre', $fin_est_membre)
            ->setParameter('id_unite', $id_unite)
            ->setParameter('id', $id_user)
            ->groupBy('e.idExpe')
            ->getQuery()
            ->getResult();
    }

    /**
     * @return ExperimentationExploitation[] Returns an array of ExperimentationExploitation objects
     */
    public function findAllCustom()
    {
        return $this->createQueryBuilder('e')
            ->groupBy('e.idExpe')
            ->getQuery()
            ->getResult();
    }

    /*
    public function findOneBySomeField($value): ?ExperimentationExploitation
    {
        return $this->createQueryBuilder('e')
            ->andWhere('e.exampleField = :val')
            ->setParameter('val', $value)
            ->getQuery()
            ->getOneOrNullResult()
        ;
    }
    */
}
